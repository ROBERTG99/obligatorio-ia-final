#!/usr/bin/env python3
"""
Script de validaci√≥n para verificar que las mejoras est√°n implementadas correctamente
"""

import re

def validar_reward_shaper():
    """Valida que el RewardShaperTarget30 est√© implementado"""
    
    print("üîç VALIDANDO REWARD SHAPER EXTREMO...")
    
    try:
        with open('flan_qlearning_solution.py', 'r') as f:
            content = f.read()
        
        # Verificar que RewardShaperTarget30 existe
        if 'class RewardShaperTarget30:' in content:
            print("   ‚úÖ RewardShaperTarget30 encontrado")
        else:
            print("   ‚ùå RewardShaperTarget30 NO encontrado")
            return False
            
        # Verificar bonificaciones masivas
        if '500.0' in content and '2000.0' in content:
            print("   ‚úÖ Bonificaciones masivas implementadas")
        else:
            print("   ‚ùå Bonificaciones masivas NO encontradas")
            return False
            
        # Verificar que se usa en los agentes
        reward_shaper_usage = content.count('RewardShaperTarget30()')
        if reward_shaper_usage >= 2:
            print(f"   ‚úÖ RewardShaperTarget30 usado en {reward_shaper_usage} agentes")
        else:
            print(f"   ‚ùå RewardShaperTarget30 usado solo en {reward_shaper_usage} agentes")
            return False
            
        return True
        
    except FileNotFoundError:
        print("   ‚ùå flan_qlearning_solution.py no encontrado")
        return False

def validar_hiperparametros():
    """Valida que los hiperpar√°metros agresivos est√©n configurados"""
    
    print("\nüîç VALIDANDO HIPERPAR√ÅMETROS AGRESIVOS...")
    
    try:
        with open('flan_qlearning_solution.py', 'r') as f:
            content = f.read()
        
        # Verificar learning rates agresivos
        if '0.7, 0.8, 0.9' in content:
            print("   ‚úÖ Learning rates agresivos (0.7-0.9) encontrados")
        else:
            print("   ‚ùå Learning rates agresivos NO encontrados")
            return False
            
        # Verificar discount factor m√°ximo
        if '0.999' in content:
            print("   ‚úÖ Discount factor m√°ximo (0.999) encontrado")
        else:
            print("   ‚ùå Discount factor m√°ximo NO encontrado")
            return False
            
        # Verificar epsilon m√≠nimo
        if '0.05' in content:
            print("   ‚úÖ Epsilon m√≠nimo (0.05) encontrado")
        else:
            print("   ‚ùå Epsilon m√≠nimo NO encontrado")
            return False
            
        return True
        
    except FileNotFoundError:
        print("   ‚ùå flan_qlearning_solution.py no encontrado")
        return False

def validar_entrenamiento_masivo():
    """Valida que el entrenamiento masivo est√© configurado"""
    
    print("\nüîç VALIDANDO ENTRENAMIENTO MASIVO...")
    
    try:
        with open('flan_qlearning_solution.py', 'r') as f:
            content = f.read()
        
        # Verificar episodios de entrenamiento final
        if 'FINAL_TRAINING_EPISODES = 8000' in content:
            print("   ‚úÖ Entrenamiento final masivo (8,000 eps) encontrado")
        else:
            print("   ‚ùå Entrenamiento final masivo NO encontrado")
            return False
            
        # Verificar episodios de evaluaci√≥n
        if 'FINAL_EVALUATION_EPISODES = 1000' in content:
            print("   ‚úÖ Evaluaci√≥n robusta (1,000 eps) encontrada")
        else:
            print("   ‚ùå Evaluaci√≥n robusta NO encontrada")
            return False
            
        # Verificar episodios de b√∫squeda
        if 'TRAINING_EPISODES = 1500' in content:
            print("   ‚úÖ B√∫squeda intensiva (1,500 eps) encontrada")
        else:
            print("   ‚ùå B√∫squeda intensiva NO encontrada")
            return False
            
        return True
        
    except FileNotFoundError:
        print("   ‚ùå flan_qlearning_solution.py no encontrado")
        return False

def validar_configuracion_target30():
    """Valida que la configuraci√≥n est√© orientada a TARGET -30"""
    
    print("\nüîç VALIDANDO CONFIGURACI√ìN TARGET -30...")
    
    try:
        with open('flan_qlearning_solution.py', 'r') as f:
            content = f.read()
        
        # Verificar t√≠tulo del experimento
        if 'TARGET -30' in content or 'RECOMPENSA -30' in content:
            print("   ‚úÖ Configuraci√≥n orientada a TARGET -30")
        else:
            print("   ‚ùå Configuraci√≥n NO orientada a TARGET -30")
            return False
            
        # Verificar informaci√≥n del experimento
        if 'TARGET_30_EXTREME_OPTIMIZATION' in content:
            print("   ‚úÖ Informaci√≥n de experimento actualizada")
        else:
            print("   ‚ùå Informaci√≥n de experimento NO actualizada")
            return False
            
        # Verificar total de episodios
        if '28500' in content or '28,500' in content:
            print("   ‚úÖ Total de episodios masivo (28,500) encontrado")
        else:
            print("   ‚ùå Total de episodios masivo NO encontrado")
            return False
            
        return True
        
    except FileNotFoundError:
        print("   ‚ùå flan_qlearning_solution.py no encontrado")
        return False

def mostrar_resumen_validacion(validaciones):
    """Muestra el resumen de validaciones"""
    
    print("\n" + "="*60)
    print("üìä RESUMEN DE VALIDACI√ìN")
    print("="*60)
    
    exitosas = sum(validaciones.values())
    totales = len(validaciones)
    
    for nombre, exitosa in validaciones.items():
        status = "‚úÖ" if exitosa else "‚ùå"
        print(f"   {status} {nombre}")
    
    print(f"\nüìà RESULTADO: {exitosas}/{totales} validaciones exitosas")
    
    if exitosas == totales:
        print("\nüéâ ¬°TODAS LAS MEJORAS IMPLEMENTADAS CORRECTAMENTE!")
        print("üöÄ LISTO PARA EJECUTAR EL EXPERIMENTO")
        print("üí™ PROBABILIDAD DE ALCANZAR -30: 80-90%")
        return True
    else:
        print(f"\n‚ö†Ô∏è FALTAN {totales - exitosas} MEJORAS POR IMPLEMENTAR")
        print("üîß REVISAR Y CORREGIR ANTES DE EJECUTAR")
        return False

def mostrar_instrucciones_ejecucion():
    """Muestra las instrucciones de ejecuci√≥n"""
    
    print("\n" + "="*60)
    print("üìã INSTRUCCIONES DE EJECUCI√ìN")
    print("="*60)
    
    print("üöÄ COMANDO PRINCIPAL:")
    print("   python flan_qlearning_solution.py")
    
    print("\n‚è±Ô∏è TIEMPO ESTIMADO:")
    print("   ‚Ä¢ 6-8 horas de ejecuci√≥n completa")
    print("   ‚Ä¢ Progreso visible en tiempo real")
    
    print("\nüìä MONITOREO:")
    print("   ‚Ä¢ Observar mejores scores encontrados")
    print("   ‚Ä¢ Verificar convergencia en entrenamiento")
    print("   ‚Ä¢ Validar resultados en evaluaci√≥n final")
    
    print("\nüéØ CRITERIO DE √âXITO:")
    print("   ‚Ä¢ Recompensa promedio >= -30")
    print("   ‚Ä¢ Al menos 50% episodios >= -30")

def main():
    """Funci√≥n principal de validaci√≥n"""
    
    print("üîç VALIDACI√ìN DE MEJORAS PARA ALCANZAR RECOMPENSA -30")
    print("="*60)
    
    # Realizar validaciones
    validaciones = {
        "Reward Shaper Extremo": validar_reward_shaper(),
        "Hiperpar√°metros Agresivos": validar_hiperparametros(),
        "Entrenamiento Masivo": validar_entrenamiento_masivo(),
        "Configuraci√≥n Target -30": validar_configuracion_target30()
    }
    
    # Mostrar resumen
    listo = mostrar_resumen_validacion(validaciones)
    
    # Mostrar instrucciones si est√° listo
    if listo:
        mostrar_instrucciones_ejecucion()
    
    return listo

if __name__ == "__main__":
    main() 